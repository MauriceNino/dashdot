"use strict";(self.webpackChunkdashdot=self.webpackChunkdashdot||[]).push([[678],{1597:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>r,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=d(5893),s=d(1151);const o={sidebar_position:6,tags:["Configuration","Styles"],title:"GPU"},t="GPU Widget",l={id:"configuration/gpu",title:"GPU",description:"{/ markdownlint-disable /}",source:"@site/docs/configuration/gpu.mdx",sourceDirName:"configuration",slug:"/configuration/gpu",permalink:"/docs/configuration/gpu",draft:!1,unlisted:!1,editUrl:"https://github.com/MauriceNino/dashdot/edit/main/apps/docs/docs/configuration/gpu.mdx",tags:[{label:"Configuration",permalink:"/docs/tags/configuration"},{label:"Styles",permalink:"/docs/tags/styles"}],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,tags:["Configuration","Styles"],title:"GPU"},sidebar:"tutorialSidebar",previous:{title:"Network",permalink:"/docs/configuration/network"},next:{title:"Integrations",permalink:"/docs/integration/"}},r={},c=[{value:"Options",id:"options",level:2},{value:"<code>DASHDOT_GPU_LABEL_LIST</code>",id:"dashdot_gpu_label_list",level:3},{value:"Styles",id:"styles",level:2},{value:"<code>DASHDOT_GPU_WIDGET_GROW</code>",id:"dashdot_gpu_widget_grow",level:3},{value:"<code>DASHDOT_GPU_WIDGET_MIN_WIDTH</code>",id:"dashdot_gpu_widget_min_width",level:3},{value:"<code>DASHDOT_GPU_SHOWN_DATAPOINTS</code>",id:"dashdot_gpu_shown_datapoints",level:3},{value:"<code>DASHDOT_GPU_POLL_INTERVAL</code>",id:"dashdot_gpu_poll_interval",level:3},{value:"Overrides",id:"overrides",level:2},{value:"<code>DASHDOT_OVERRIDE_GPU_BRANDS</code>",id:"dashdot_override_gpu_brands",level:3},{value:"<code>DASHDOT_OVERRIDE_GPU_MODELS</code>",id:"dashdot_override_gpu_models",level:3},{value:"<code>DASHDOT_OVERRIDE_GPU_MEMORIES</code>",id:"dashdot_override_gpu_memories",level:3}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:["\n",(0,i.jsx)(n.h1,{id:"gpu-widget",children:"GPU Widget"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["To use the GPU widget, make sure to include it in the ",(0,i.jsx)(n.a,{href:"./basic#dashdot_widget_list",children:(0,i.jsx)(n.code,{children:"DASHDOT_WIDGET_LIST"})}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Also, if you are running the docker image, make sure to use the ",(0,i.jsx)(n.code,{children:"nvidia"})," tag (see ",(0,i.jsx)(n.a,{href:"../installation/docker#gpu-support",children:"Installation with Docker"}),")."]}),"\n"]})}),"\n","\n",(0,i.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,i.jsx)(n.h3,{id:"dashdot_gpu_label_list",children:(0,i.jsx)(n.code,{children:"DASHDOT_GPU_LABEL_LIST"})}),"\n",(0,i.jsx)(n.p,{children:"Selects which data is shown in the gpu widget."}),"\n",(0,i.jsxs)(n.p,{children:["The available options are: ",(0,i.jsx)(n.code,{children:"brand"}),", ",(0,i.jsx)(n.code,{children:"model"}),", ",(0,i.jsx)(n.code,{children:"memory"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["type: ",(0,i.jsx)(n.code,{children:"string (comma separated list)"})]}),"\n",(0,i.jsxs)(n.li,{children:["default: ",(0,i.jsx)(n.code,{children:"brand, model, memory"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"styles",children:"Styles"}),"\n",(0,i.jsx)(n.h3,{id:"dashdot_gpu_widget_grow",children:(0,i.jsx)(n.code,{children:"DASHDOT_GPU_WIDGET_GROW"})}),"\n",(0,i.jsx)(n.p,{children:"To adjust the relative size of the GPU widget."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["type: ",(0,i.jsx)(n.code,{children:"number"})]}),"\n",(0,i.jsxs)(n.li,{children:["default: ",(0,i.jsx)(n.code,{children:"6"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"dashdot_gpu_widget_min_width",children:(0,i.jsx)(n.code,{children:"DASHDOT_GPU_WIDGET_MIN_WIDTH"})}),"\n",(0,i.jsx)(n.p,{children:"To adjust the minimum width of the GPU widget (in px)."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["type: ",(0,i.jsx)(n.code,{children:"number"})]}),"\n",(0,i.jsxs)(n.li,{children:["default: ",(0,i.jsx)(n.code,{children:"700"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"dashdot_gpu_shown_datapoints",children:(0,i.jsx)(n.code,{children:"DASHDOT_GPU_SHOWN_DATAPOINTS"})}),"\n",(0,i.jsx)(n.p,{children:"The amount of datapoints in the GPU graph."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["type: ",(0,i.jsx)(n.code,{children:"number"})]}),"\n",(0,i.jsxs)(n.li,{children:["default: ",(0,i.jsx)(n.code,{children:"20"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"dashdot_gpu_poll_interval",children:(0,i.jsx)(n.code,{children:"DASHDOT_GPU_POLL_INTERVAL"})}),"\n",(0,i.jsx)(n.p,{children:"Read the GPU load every x milliseconds."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["type: ",(0,i.jsx)(n.code,{children:"number"})]}),"\n",(0,i.jsxs)(n.li,{children:["default: ",(0,i.jsx)(n.code,{children:"1000"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"overrides",children:"Overrides"}),"\n",(0,i.jsx)(n.p,{children:"You can use overrides to manually set statically gathered data. This is useful\nif you want to use dashdot on a VPS or a system where the data cannot be\ngathered automatically."}),"\n",(0,i.jsx)(n.h3,{id:"dashdot_override_gpu_brands",children:(0,i.jsx)(n.code,{children:"DASHDOT_OVERRIDE_GPU_BRANDS"})}),"\n",(0,i.jsxs)(n.p,{children:["Pass a comma-separated list of brands of your GPUs. You can skip correct GPUs, by passing empty values for it (e.g. ",(0,i.jsx)(n.code,{children:"Intel,,Nvidia"})," would result in ",(0,i.jsx)(n.code,{children:"Intel"})," for GPU 1 and ",(0,i.jsx)(n.code,{children:"Nvidia"})," for GPU 3)."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["type: ",(0,i.jsx)(n.code,{children:"string"})]}),"\n",(0,i.jsxs)(n.li,{children:["default: ",(0,i.jsx)(n.code,{children:"unset"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"dashdot_override_gpu_models",children:(0,i.jsx)(n.code,{children:"DASHDOT_OVERRIDE_GPU_MODELS"})}),"\n",(0,i.jsxs)(n.p,{children:["Pass a comma-separated list of models of your GPUs. You can skip correct GPUs, by passing empty values for it (e.g. ",(0,i.jsx)(n.code,{children:"CometLake-H GT2,,GeForce GTX 1650 Ti"})," would result in ",(0,i.jsx)(n.code,{children:"CometLake-H GT2"})," for GPU 1 and ",(0,i.jsx)(n.code,{children:"GeForce GTX 1650 Ti"})," for GPU 3)."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["type: ",(0,i.jsx)(n.code,{children:"string"})]}),"\n",(0,i.jsxs)(n.li,{children:["default: ",(0,i.jsx)(n.code,{children:"unset"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"dashdot_override_gpu_memories",children:(0,i.jsx)(n.code,{children:"DASHDOT_OVERRIDE_GPU_MEMORIES"})}),"\n",(0,i.jsxs)(n.p,{children:["Pass a comma-separated list of memory-sizes of your GPUs. You can skip correct GPUs, by passing empty values for it (e.g. ",(0,i.jsx)(n.code,{children:"4096,,256"})," would result in ",(0,i.jsx)(n.code,{children:"4 GiB"})," for GPU 1 and ",(0,i.jsx)(n.code,{children:"256 MiB"})," for GPU 3)."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["type: ",(0,i.jsx)(n.code,{children:"string"})]}),"\n",(0,i.jsxs)(n.li,{children:["default: ",(0,i.jsx)(n.code,{children:"unset"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},1151:(e,n,d)=>{d.d(n,{Z:()=>l,a:()=>t});var i=d(7294);const s={},o=i.createContext(s);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);